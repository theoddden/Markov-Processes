#!/usr/bin/env python3
import numpy as np
import yfinance as yf
from datetime import datetime, timedelta
from arch import arch_model
from filterpy.kalman import UnscentedKalmanFilter as UKF, MerweScaledSigmaPoints

# Function to fetch historical data from Yahoo Finance
def fetch_data(symbol, start_date, end_date):
	data = yf.download(symbol, start=start_date, end=end_date)
	return data['Adj Close'].values

# Function to fit a Threshold GARCH model
def fit_threshold_garch(returns):
	model = arch_model(returns * 100, vol='Garch', p=1, o=1, q=1, power=1.0, dist='Normal', mean='Zero')
	result = model.fit(update_freq=5)
	return result.conditional_volatility

# Function for UKF state transition (predicts the next state)
def fx(x, dt):
	return x  # Identity function: assuming the price follows a random walk

# Function for UKF observation model (maps the true state to observed state)
def hx(x):
	return x  # Direct observation of the price

# Function to initialize UKF
def initialize_ukf(initial_state_mean, initial_state_covariance, vix_coeff):
	# Use MerweScaledSigmaPoints to initialize UKF sigma points
	points = MerweScaledSigmaPoints(1, alpha=0.1, beta=2.0, kappa=0.0)
	ukf = UKF(dim_x=1, dim_z=1, fx=fx, hx=hx, dt=1, points=points)
	
	# Initialize UKF parameters
	ukf.x = np.array([initial_state_mean])
	ukf.P = np.array([[initial_state_covariance]])
	ukf.Q = np.array([[vix_coeff * 0.001]])  # Process noise covariance
	ukf.R = np.array([[vix_coeff * 0.001]])  # Observation noise covariance
	return ukf

# Main function for estimating price range
def estimate_price_range(symbol, start_date, end_date):
	# Fetch historical data
	prices = fetch_data(symbol, start_date, end_date)
	
	# Compute returns
	returns = np.diff(np.log(prices))
	
	# Fit Threshold GARCH model
	volatility = fit_threshold_garch(returns)
	
	# Fetch VIX as a coefficient
	vix_ticker = yf.Ticker("^VIX")
	vix_data = vix_ticker.history(period="1d")
	vix_coeff = vix_data["Close"].iloc[-1] / 100  # Normalize VIX value
	
	# Initialize UKF
	initial_state_mean = prices[0]
	initial_state_covariance = 1.0
	ukf = initialize_ukf(initial_state_mean, initial_state_covariance, vix_coeff)
	
	# Initialize variables for price range estimation
	num_days = len(prices)
	low_estimate = []
	high_estimate = []
	
	# Iterate over historical prices to update estimates
	for i in range(num_days - 1):
		observation = prices[i]
		
		# Perform UKF prediction and update steps
		ukf.predict()
		ukf.update(observation)
		
		# Predict next day's price range using UKF estimates
		next_price = ukf.x[0]
		next_volatility = np.sqrt(ukf.P[0][0])
		
		# Record low and high estimates for the next day
		low_estimate.append(next_price - 2 * next_volatility)
		high_estimate.append(next_price + 2 * next_volatility)
		
	return low_estimate[-1], high_estimate[-1]

# Main code
if __name__ == "__main__":
	# Define parameters
	symbol = "SPY"
	end_date = datetime.now().strftime('%Y-%m-%d')
	start_date = (datetime.now() - timedelta(days=28)).strftime('%Y-%m-%d')
	
	# Estimate price range for the next week
	low_price, high_price = estimate_price_range(symbol, start_date, end_date)
	
	# Print the estimated low and high prices for the next week
	print(f"Low price for next week: {low_price:.2f}")
	print(f"High price for next week: {high_price:.2f}")
	
