import numpy as np
import yfinance as yf
from datetime import datetime, timedelta
from arch import arch_model
from pykalman import KalmanFilter

# Function to fetch historical data from Yahoo Finance
def fetch_data(symbol, start_date, end_date):
    data = yf.download(symbol, start=start_date, end=end_date)
    return data['Adj Close'].values

# Function to fit a Threshold GARCH model
def fit_threshold_garch(returns):
    model = arch_model(returns*100, vol='Garch', p=1, o=1, q=1, power=1.0, dist='Normal', mean='Zero')
    result = model.fit(update_freq=5)
    return result.conditional_volatility

# Function to initialize Kalman filter
def initialize_kalman(initial_state_mean, initial_state_covariance, transition_matrices, observation_matrices):
    return KalmanFilter(initial_state_mean=initial_state_mean,
                        initial_state_covariance=initial_state_covariance,
                        transition_matrices=transition_matrices,
                        observation_matrices=observation_matrices)

# Function to update Kalman filter state
def update_kalman(kf, observation, filtered_state_covariance):
    return kf.filter_update(observation, filtered_state_covariance)

# Main function for estimating price range
def estimate_price_range(symbol, start_date, end_date):
    # Fetch historical data
    prices = fetch_data(symbol, start_date, end_date)
    
    # Compute returns
    returns = np.diff(np.log(prices))

    # Fit Threshold GARCH model
    volatility = fit_threshold_garch(returns)

    # Initialize Kalman filter
    initial_state_mean = prices[0]
    initial_state_covariance = 1.0
    transition_matrices = [[1]]
    observation_matrices = [[1]]
    kf = initialize_kalman(initial_state_mean, initial_state_covariance, transition_matrices, observation_matrices)

    # Initialize variables for price range estimation
    num_days = len(prices)
    low_estimate = []
    high_estimate = []

    # Iterate over historical prices to update estimates
    for i in range(num_days - 1):
        observation = prices[i]

        # Update Kalman filter state
        filtered_state_mean, filtered_state_covariance = kf.filter_update(observation, volatility[i])
        filtered_state_mean = filtered_state_mean[0]
        filtered_state_covariance = filtered_state_covariance[0][0]

        # Predict next day's price range using Kalman filter estimates
        next_price = filtered_state_mean
        next_volatility = np.sqrt(filtered_state_covariance)

        # Record low and high estimates for the next day
        low_estimate.append(next_price - 2 * next_volatility)
        high_estimate.append(next_price + 2 * next_volatility)

    return low_estimate[-1], high_estimate[-1]

# Main code
if __name__ == "__main__":
    # Define parameters
    symbol = "SPY"
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=28)).strftime('%Y-%m-%d')

    # Estimate price range for the next week
    low_price, high_price = estimate_price_range(symbol, start_date, end_date)
    
    # Print the estimated low and high prices for the next week
    print(f"low price for next week: {low_price[-1]:.2f}")
    print(f"high price for next week: {high_price[-1]:.2f}")
    
